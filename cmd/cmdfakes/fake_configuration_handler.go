// Code generated by counterfeiter. DO NOT EDIT.
package cmdfakes

import (
	"sync"

	"github.com/goodmustache/appli.ed/cmd"
	"github.com/goodmustache/appli.ed/configuration"
)

type FakeConfigurationHandler struct {
	ReadConfigStub        func(string) (configuration.WatchConfiguration, error)
	readConfigMutex       sync.RWMutex
	readConfigArgsForCall []struct {
		arg1 string
	}
	readConfigReturns struct {
		result1 configuration.WatchConfiguration
		result2 error
	}
	readConfigReturnsOnCall map[int]struct {
		result1 configuration.WatchConfiguration
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConfigurationHandler) ReadConfig(arg1 string) (configuration.WatchConfiguration, error) {
	fake.readConfigMutex.Lock()
	ret, specificReturn := fake.readConfigReturnsOnCall[len(fake.readConfigArgsForCall)]
	fake.readConfigArgsForCall = append(fake.readConfigArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ReadConfigStub
	fakeReturns := fake.readConfigReturns
	fake.recordInvocation("ReadConfig", []interface{}{arg1})
	fake.readConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeConfigurationHandler) ReadConfigCallCount() int {
	fake.readConfigMutex.RLock()
	defer fake.readConfigMutex.RUnlock()
	return len(fake.readConfigArgsForCall)
}

func (fake *FakeConfigurationHandler) ReadConfigCalls(stub func(string) (configuration.WatchConfiguration, error)) {
	fake.readConfigMutex.Lock()
	defer fake.readConfigMutex.Unlock()
	fake.ReadConfigStub = stub
}

func (fake *FakeConfigurationHandler) ReadConfigArgsForCall(i int) string {
	fake.readConfigMutex.RLock()
	defer fake.readConfigMutex.RUnlock()
	argsForCall := fake.readConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConfigurationHandler) ReadConfigReturns(result1 configuration.WatchConfiguration, result2 error) {
	fake.readConfigMutex.Lock()
	defer fake.readConfigMutex.Unlock()
	fake.ReadConfigStub = nil
	fake.readConfigReturns = struct {
		result1 configuration.WatchConfiguration
		result2 error
	}{result1, result2}
}

func (fake *FakeConfigurationHandler) ReadConfigReturnsOnCall(i int, result1 configuration.WatchConfiguration, result2 error) {
	fake.readConfigMutex.Lock()
	defer fake.readConfigMutex.Unlock()
	fake.ReadConfigStub = nil
	if fake.readConfigReturnsOnCall == nil {
		fake.readConfigReturnsOnCall = make(map[int]struct {
			result1 configuration.WatchConfiguration
			result2 error
		})
	}
	fake.readConfigReturnsOnCall[i] = struct {
		result1 configuration.WatchConfiguration
		result2 error
	}{result1, result2}
}

func (fake *FakeConfigurationHandler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.readConfigMutex.RLock()
	defer fake.readConfigMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConfigurationHandler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cmd.ConfigurationHandler = new(FakeConfigurationHandler)
